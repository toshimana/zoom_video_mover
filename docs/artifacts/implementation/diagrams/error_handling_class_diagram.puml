@startuml ErrorHandlingClassDiagram
!theme plain
title クラス図 - 多層エラーハンドリング・自動回復システム

package "Error Detection Layer" {
  interface IErrorDetector {
    + detect_errors(): Vec<DetectedError>
    + validate_system_state(): ValidationResult
  }
  
  class InputValidationDetector {
    - validation_rules: Vec<ValidationRule>
    + validate_input<T>(input: T): Result<T, ValidationError>
    + check_business_constraints(): Result<(), ConstraintError>
  }
  
  class RuntimeMonitoringDetector {
    - panic_handler: PanicHandler
    - exception_monitor: ExceptionMonitor
    + monitor_runtime_state(): RuntimeState
    + capture_panic_info(): PanicInfo
  }
  
  class ExternalSystemDetector {
    - network_monitor: NetworkMonitor
    - api_health_checker: ApiHealthChecker
    + detect_network_failures(): Vec<NetworkFailure>
    + check_external_service_health(): ServiceHealthStatus
  }
  
  InputValidationDetector --|> IErrorDetector
  RuntimeMonitoringDetector --|> IErrorDetector
  ExternalSystemDetector --|> IErrorDetector
}

package "Error Classification & Processing Layer" {
  abstract class ApplicationError {
    + context: ErrorContext
    + timestamp: DateTime<Utc>
    + trace_id: String
    + type_name(): &str
    + severity(): ErrorSeverity
    + is_recoverable(): bool
  }
  
  class AuthenticationError {
    + oauth_failed: OAuthFailedInfo
    + token_error: TokenError
    + session_error: SessionError
  }
  
  class NetworkError {
    + http_error: HttpError
    + dns_error: DnsError
    + tls_error: TlsError
    + connection_timeout: Duration
    + rate_limit: RateLimitInfo
  }
  
  class FileSystemError {
    + file_operation_error: FileOperationError
    + permission_denied: PermissionInfo
    + insufficient_space: SpaceInfo
    + integrity_error: FileIntegrityError
  }
  
  class DataProcessingError {
    + parsing_error: ParsingError
    + validation_error: ValidationError
    + transformation_error: TransformationError
  }
  
  class ConfigurationError {
    + missing_config: Vec<String>
    + invalid_config: ConfigValidationError
    + config_conflict: ConfigConflictInfo
  }
  
  class BusinessLogicError {
    + validation_failed: ValidationFailedInfo
    + workflow_error: WorkflowError
    + state_inconsistency: StateInconsistencyError
  }
  
  class ExternalSystemError {
    + zoom_api_error: ZoomApiError
    + oauth_provider_error: OAuthProviderError
    + service_unavailable: ServiceUnavailableInfo
  }
  
  class InternalSystemError {
    + memory_error: MemoryError
    + thread_error: ThreadError
    + resource_exhaustion: ResourceExhaustionError
  }
  
  AuthenticationError --|> ApplicationError
  NetworkError --|> ApplicationError
  FileSystemError --|> ApplicationError
  DataProcessingError --|> ApplicationError
  ConfigurationError --|> ApplicationError
  BusinessLogicError --|> ApplicationError
  ExternalSystemError --|> ApplicationError
  InternalSystemError --|> ApplicationError
  
  class ErrorClassifier {
    - classification_rules: HashMap<ErrorType, ClassificationRule>
    + classify_error(error: &ApplicationError): ErrorClassification
    + assess_severity(error: &ApplicationError): ErrorSeverity
    + determine_impact_scope(error: &ApplicationError): ImpactScope
  }
  
  class ContextualInformationEnricher {
    - system_info_collector: SystemInfoCollector
    - user_context_manager: UserContextManager
    + enrich_error_context(error: &mut ApplicationError): Result<(), EnrichmentError>
    + collect_system_snapshot(): SystemSnapshot
  }
}

package "Error Recovery & Response Layer" {
  interface IRecoveryStrategy {
    + name(): String
    + is_applicable(error: &ApplicationError, analysis: &ErrorAnalysis): bool
    + execute_recovery(error: &ApplicationError, analysis: &ErrorAnalysis): Result<RecoveryAction, StrategyError>
    + estimate_success_probability(error: &ApplicationError, analysis: &ErrorAnalysis): f64
    + estimate_recovery_cost(error: &ApplicationError, analysis: &ErrorAnalysis): RecoveryCost
  }
  
  class ErrorRecoveryEngine {
    - recovery_strategies: HashMap<ErrorType, Vec<Box<dyn IRecoveryStrategy>>>
    - recovery_history: Arc<RecoveryHistoryManager>
    - effectiveness_monitor: Arc<RecoveryEffectivenessMonitor>
    - adaptive_learning: Arc<AdaptiveRecoveryLearning>
    + recover_from_error(error: &ApplicationError): Result<RecoveryResult, RecoveryError>
    + analyze_error(error: &ApplicationError): Result<ErrorAnalysis, RecoveryError>
    + identify_applicable_strategies(analysis: &ErrorAnalysis): Vec<Box<dyn IRecoveryStrategy>>
    + prioritize_recovery_strategies(strategies: Vec<Box<dyn IRecoveryStrategy>>, analysis: &ErrorAnalysis): Vec<Box<dyn IRecoveryStrategy>>
  }
  
  class AuthenticationRecoveryStrategy {
    - auth_client: Arc<dyn AuthenticationClient>
    - token_manager: Arc<dyn TokenManager>
    - recovery_config: AuthRecoveryConfig
    + recover_from_token_error(token_error: &TokenError): Result<RecoveryAction, StrategyError>
    + attempt_reauthentication(): Result<RecoveryAction, StrategyError>
  }
  
  class NetworkRecoveryStrategy {
    - http_client: Arc<dyn HttpClient>
    - connection_manager: Arc<dyn ConnectionManager>
    - recovery_config: NetworkRecoveryConfig
    + recover_from_timeout(): Result<RecoveryAction, StrategyError>
    + recover_from_rate_limit(retry_after: Duration): Result<RecoveryAction, StrategyError>
  }
  
  class FileSystemRecoveryStrategy {
    - file_manager: Arc<dyn FileManager>
    - disk_space_manager: Arc<dyn DiskSpaceManager>
    - recovery_config: FileSystemRecoveryConfig
    + recover_from_space_shortage(): Result<RecoveryAction, StrategyError>
    + recover_from_permission_error(): Result<RecoveryAction, StrategyError>
  }
  
  class UserInterventionManager {
    - intervention_requests: Arc<RwLock<HashMap<String, InterventionRequest>>>
    - notification_system: Arc<dyn NotificationSystem>
    - intervention_history: Arc<InterventionHistoryManager>
    + request_user_intervention(error: &ApplicationError, recovery_attempts: &[FailedRecoveryAttempt]): Result<InterventionRequest, InterventionError>
    + create_user_friendly_error_summary(error: &ApplicationError): Result<UserFriendlyErrorSummary, InterventionError>
    + suggest_user_actions(error: &ApplicationError, recovery_attempts: &[FailedRecoveryAttempt]): Result<Vec<SuggestedAction>, InterventionError>
  }
  
  AuthenticationRecoveryStrategy --|> IRecoveryStrategy
  NetworkRecoveryStrategy --|> IRecoveryStrategy
  FileSystemRecoveryStrategy --|> IRecoveryStrategy
  
  ErrorRecoveryEngine --> IRecoveryStrategy
  ErrorRecoveryEngine --> UserInterventionManager
}

package "Error Reporting & Logging Layer" {
  class LocalizedErrorMessageSystem {
    - message_resources: Arc<MessageResourceManager>
    - current_locale: Arc<RwLock<Locale>>
    - template_engine: Arc<MessageTemplateEngine>
    - context_adapter: Arc<ContextualMessageAdapter>
    + generate_localized_message(error: &ApplicationError, context: &MessageContext): Result<LocalizedErrorMessage, MessageError>
    + generate_japanese_message(error: &ApplicationError): Result<JapaneseErrorMessage, MessageError>
    + generate_auth_error_japanese(auth_error: &AuthenticationError, context: &MessageContext): Result<JapaneseErrorMessage, MessageError>
  }
  
  class ProgressiveErrorDisclosure {
    - disclosure_level_manager: Arc<DisclosureLevelManager>
    - detail_level_config: ErrorDetailLevelConfig
    - user_profile: Arc<UserProfileManager>
    + generate_progressive_display(error: &ApplicationError, user_context: &UserContext): Result<ProgressiveErrorDisplay, DisplayError>
    + create_basic_error_display(error: &ApplicationError, technical_level: &TechnicalLevel): Result<BasicErrorDisplay, DisplayError>
    + create_intermediate_error_display(error: &ApplicationError, technical_level: &TechnicalLevel): Result<IntermediateErrorDisplay, DisplayError>
    + create_advanced_error_display(error: &ApplicationError, technical_level: &TechnicalLevel): Result<AdvancedErrorDisplay, DisplayError>
    + create_debug_error_display(error: &ApplicationError, technical_level: &TechnicalLevel): Result<DebugErrorDisplay, DisplayError>
  }
  
  class ComprehensiveErrorLogger {
    - log_output_manager: Arc<LogOutputManager>
    - log_enricher: Arc<ErrorLogEnricher>
    - sensitive_data_masker: Arc<SensitiveDataMasker>
    - log_archiver: Arc<LogArchiver>
    - log_analytics_engine: Arc<LogAnalyticsEngine>
    + log_error_comprehensive(error: &ApplicationError, context: &ErrorLoggingContext): Result<LogEntry, LoggingError>
    + create_base_log_entry(error: &ApplicationError, context: &ErrorLoggingContext): Result<LogEntry, LoggingError>
    + enrich_error_log(log_entry: LogEntry, error: &ApplicationError): Result<LogEntry, LoggingError>
  }
  
  class ErrorAnalyticsEngine {
    - pattern_database: Arc<ErrorPatternDatabase>
    - ml_models: HashMap<AnalysisType, Arc<dyn ErrorAnalysisModel>>
    - time_series_analyzer: Arc<TimeSeriesAnalyzer>
    - alert_generator: Arc<ErrorAlertGenerator>
    + analyze_error_realtime(error_log: &LogEntry): Result<ErrorAnalysisResult, AnalyticsError>
    + analyze_error_patterns(error_log: &LogEntry): Result<PatternAnalysisResult, AnalyticsError>
    + analyze_error_trends(error_log: &LogEntry): Result<TrendAnalysisResult, AnalyticsError>
    + detect_error_anomalies(error_log: &LogEntry): Result<AnomalyDetectionResult, AnalyticsError>
    + predict_error_impact(error_log: &LogEntry): Result<ImpactPredictionResult, AnalyticsError>
  }
  
  class ErrorMetricsTracker {
    - metrics_collector: Arc<MetricsCollector> 
    - kpi_calculator: Arc<ErrorKpiCalculator>
    - dashboard_updater: Arc<MetricsDashboardUpdater>
    - sla_monitor: Arc<ErrorSlaMonitor>
    + record_error_metrics(error: &ApplicationError, resolution_info: Option<&ErrorResolutionInfo>): Result<(), MetricsError>
    + record_basic_error_metrics(error: &ApplicationError): Result<(), MetricsError>
    + record_resolution_metrics(error: &ApplicationError, resolution: &ErrorResolutionInfo): Result<(), MetricsError>
    + update_error_kpis(): Result<(), MetricsError>
  }
}

' 層間の依存関係
ErrorClassifier --> IErrorDetector
ContextualInformationEnricher --> IErrorDetector

ErrorRecoveryEngine --> ErrorClassifier
ErrorRecoveryEngine --> ContextualInformationEnricher

LocalizedErrorMessageSystem --> ApplicationError
ProgressiveErrorDisclosure --> ApplicationError
ComprehensiveErrorLogger --> ApplicationError
ErrorAnalyticsEngine --> ComprehensiveErrorLogger
ErrorMetricsTracker --> ApplicationError

' 共通データ構造
class ErrorContext {
    + timestamp: DateTime<Utc>
    + execution_context: ExecutionContext
    + session_info: Option<SessionInfo>
    + operation_details: OperationDetails
    + trace_id: String
    + related_resources: Vec<ResourceIdentifier>
}

class RecoveryResult {
    <<enumeration>>
    + Recovered { strategy_used: String, recovery_action: RecoveryAction, recovery_duration: Duration, validation_result: RecoveryValidationResult }
    + RecoveryFailed { error_analysis: ErrorAnalysis, attempted_strategies: Vec<FailedRecoveryAttempt>, fallback_options: Vec<FallbackOption> }
    + NoRecoveryPossible { error_analysis: ErrorAnalysis, reason: String }
}

class LocalizedErrorMessage {
    + locale: Locale
    + title: String
    + description: String
    + action_suggestions: Vec<String>
    + technical_details: Option<String>
    + display_style: DisplayStyle
}

class LogEntry {
    + timestamp: DateTime<Utc>
    + log_id: String
    + log_level: LogLevel
    + error_info: ErrorLogInfo
    + execution_context: ExecutionContextInfo
    + system_state: SystemState
    + user_context: UserContext
    + trace_info: TraceInfo
    + metadata: HashMap<String, serde_json::Value>
}

' 複合関係
ApplicationError *-- ErrorContext
ErrorRecoveryEngine *-- RecoveryResult
LocalizedErrorMessageSystem *-- LocalizedErrorMessage
ComprehensiveErrorLogger *-- LogEntry

' エラーハンドリングの統合制御
class ErrorHandlingOrchestrator {
    - error_detectors: Vec<Box<dyn IErrorDetector>>
    - error_classifier: Arc<ErrorClassifier>
    - recovery_engine: Arc<ErrorRecoveryEngine>
    - message_system: Arc<LocalizedErrorMessageSystem>
    - logger: Arc<ComprehensiveErrorLogger>
    - metrics_tracker: Arc<ErrorMetricsTracker>
    + handle_error_comprehensive(error: ApplicationError): Result<ErrorHandlingResult, ErrorHandlingError>
    + orchestrate_error_pipeline(error: ApplicationError): Result<(), ErrorHandlingError>
}

ErrorHandlingOrchestrator --> IErrorDetector
ErrorHandlingOrchestrator --> ErrorClassifier
ErrorHandlingOrchestrator --> ErrorRecoveryEngine
ErrorHandlingOrchestrator --> LocalizedErrorMessageSystem
ErrorHandlingOrchestrator --> ComprehensiveErrorLogger
ErrorHandlingOrchestrator --> ErrorMetricsTracker

note right of ErrorHandlingOrchestrator
  **統合エラーハンドリング制御**
  - 検出→分類→回復→報告→記録の統合フロー
  - 4層アーキテクチャの統合制御
  - 並列処理・非同期処理対応
  - 全体最適化・性能監視
end note

note bottom of ApplicationError
  **8カテゴリエラー階層**
  - Authentication: OAuth・Token・Session
  - Network: HTTP・DNS・TLS・Rate Limit
  - FileSystem: I/O・Permission・Space・Integrity
  - DataProcessing: Parse・Validation・Transform
  - Configuration: Missing・Invalid・Conflict
  - BusinessLogic: Validation・Workflow・State
  - ExternalSystem: API・Service・Integration
  - InternalSystem: Memory・Thread・Resource
end note

note top of IRecoveryStrategy
  **多層回復戦略**
  - 自動回復: 指数バックオフ・リトライ・状態復元
  - 適応的学習: 効果測定・戦略最適化
  - ユーザー介入: 段階的エスカレーション
  - フォールバック: 機能縮退・代替手段
end note

@enduml