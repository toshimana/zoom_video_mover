@startuml システム方式設計図
!theme plain

skinparam backgroundColor #FAFAFA
skinparam packageBackgroundColor #E8F4FD
skinparam componentBackgroundColor #F0F8E8
skinparam interfaceBackgroundColor #FFE4B5
skinparam databaseBackgroundColor #FFFFE0

title システム方式設計図 - アーキテクチャ構成

package "プレゼンテーション層" as PresentationLayer {
  component "CLI Interface" as CLI {
    interface "Command Line Args" as CLIArgs
    interface "Interactive Mode" as Interactive
  }
  
  component "GUI Interface" as GUI {
    interface "egui/eframe" as EguiUI
    interface "Event Handler" as EventHandler
  }
}

package "ビジネスロジック層" as BusinessLayer {
  component "Authentication Manager" as AuthMgr {
    interface "OAuth 2.0 Client" as OAuth
    interface "Token Manager" as TokenMgr
  }
  
  component "Recording Manager" as RecordMgr {
    interface "API Client" as APIClient
    interface "File Downloader" as Downloader
  }
  
  component "Configuration Manager" as ConfigMgr {
    interface "TOML Parser" as TOML
    interface "Settings Validator" as Validator
  }
  
  component "Error Handler" as ErrorHandler {
    interface "Retry Logic" as Retry
    interface "Logger" as Logger
  }
}

package "インフラストラクチャ層" as InfraLayer {
  component "HTTP Client" as HTTPClient {
    note right : reqwest crate
  }
  
  component "File System" as FileSystem {
    note right : std::fs + tokio::fs
  }
  
  component "Windows Console" as WinConsole {
    note right : windows crate
  }
  
  database "Local Storage" as LocalDB {
    file "config.toml" as ConfigFile
    file "auth_cache" as AuthCache
    file "download_logs" as LogFiles
  }
}

cloud "External Services" as External {
  interface "Zoom API" as ZoomAPI
  interface "OAuth Provider" as OAuthProvider
}

' レイヤー間の依存関係
CLI --> AuthMgr
CLI --> RecordMgr
CLI --> ConfigMgr
GUI --> AuthMgr
GUI --> RecordMgr
GUI --> ConfigMgr

AuthMgr --> HTTPClient
AuthMgr --> LocalDB
RecordMgr --> HTTPClient
RecordMgr --> FileSystem
ConfigMgr --> LocalDB
ErrorHandler --> Logger

' 外部サービスとの連携
AuthMgr --> ZoomAPI
AuthMgr --> OAuthProvider
RecordMgr --> ZoomAPI

' Windows固有の依存関係
CLI --> WinConsole
GUI --> WinConsole

' コンポーネント詳細
note right of AuthMgr
  **認証管理**
  - OAuth 2.0 フロー実装
  - PKCE対応
  - トークン自動更新
  - セキュア保存
end note

note right of RecordMgr
  **録画管理**
  - 一覧取得API
  - 並列ダウンロード
  - 進捗監視
  - メタデータ処理
end note

note right of ErrorHandler
  **エラー処理**
  - 指数バックオフ
  - リトライ戦略
  - 構造化ログ
  - ユーザー通知
end note

' アーキテクチャパターン
package "設計パターン" as Patterns {
  note as PatternNote
    **適用パターン**
    - レイヤードアーキテクチャ
    - 依存性注入 (DI)
    - Repository パターン
    - Strategy パターン (認証方式)
    - Observer パターン (進捗通知)
  end note
}

' 技術スタック
package "技術スタック" as TechStack {
  component "言語・ランタイム" as Language {
    note right
      - Rust 1.70+
      - tokio (非同期ランタイム)
      - serde (シリアライゼーション)
    end note
  }
  
  component "ライブラリ" as Libraries {
    note right
      - reqwest (HTTP Client)
      - oauth2 (OAuth 2.0)
      - egui/eframe (GUI)
      - env_logger (ログ)
      - windows (Windows API)
    end note
  }
}

' データフロー
note bottom
  **主要データフロー**
  1. 設定読込: ConfigFile → ConfigMgr → BusinessLayer
  2. 認証: GUI/CLI → AuthMgr → ZoomAPI → TokenStorage
  3. 録画取得: RecordMgr → ZoomAPI → FileSystem
  4. エラー処理: ErrorHandler → Logger → LogFiles
end note

' 非機能要件への対応
package "非機能要件対応" as NFRImplementation {
  component "性能対応" as Performance {
    note right
      - tokio非同期処理
      - 並列ダウンロード制御
      - メモリ効率的ストリーミング
    end note
  }
  
  component "セキュリティ対応" as Security {
    note right
      - OAuth 2.0 + PKCE
      - 認証情報暗号化
      - HTTPS強制
    end note
  }
  
  component "可用性対応" as Reliability {
    note right
      - 自動リトライ
      - エラー回復
      - ログベース診断
    end note
  }
}

@enduml