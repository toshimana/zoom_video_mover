@startuml AsyncDownloadSequence
!theme plain
title 詳細シーケンス図 - async/await並列ダウンロード実装

participant "MainWindow" as ui
participant "DownloadService" as svc
participant "ParallelDownloader" as downloader
participant "Semaphore" as sem
participant "tokio::spawn" as spawn1
participant "tokio::spawn" as spawn2
participant "HttpClient" as http
participant "FileWriter" as writer
participant "ProgressTracker" as tracker

ui -> svc : download_multiple(recordings).await
activate svc

svc -> downloader : new(max_concurrent: 5)
activate downloader

svc -> tracker : new()
activate tracker

loop for each recording
    svc -> svc : create_download_task(recording)
    svc -> tracker : add_task(task)
end

svc -> svc : spawn_parallel_downloads()

par Download Task 1
    svc -> spawn1 : tokio::spawn(download_single(task1))
    activate spawn1
    
    spawn1 -> sem : acquire().await
    note right : 同時ダウンロード数制限
    
    spawn1 -> http : download_stream(url).await
    activate http
    
    loop チャンクストリーミング
        http -> http : next_chunk().await
        http -> spawn1 : Some(chunk)
        
        spawn1 -> writer : write_chunk(chunk).await
        activate writer
        writer --> spawn1 : bytes_written
        deactivate writer
        
        spawn1 -> tracker : update_progress(task_id, bytes).await
        tracker -> ui : progress_notification
        
        alt エラー発生
            spawn1 -> spawn1 : handle_error(error)
            spawn1 -> spawn1 : retry_with_backoff().await
        end
    end
    
    http --> spawn1 : stream_complete
    deactivate http
    
    spawn1 -> writer : finalize_file().await
    activate writer
    writer -> writer : verify_checksum()
    writer --> spawn1 : file_complete
    deactivate writer
    
    spawn1 -> sem : release()
    spawn1 -> tracker : task_completed(task_id).await
    
    deactivate spawn1
    
else Download Task 2 (並列実行)
    svc -> spawn2 : tokio::spawn(download_single(task2))
    activate spawn2
    
    note right of spawn2
        同様の非同期処理を並列実行
        セマフォによる同時実行数制御
    end note
    
    spawn2 -> spawn2 : 同様の非同期フロー
    
    deactivate spawn2
end

' 全タスク完了待機
svc -> svc : join_all(tasks).await
note right : 全ての並列タスクの完了を待機

svc -> tracker : get_final_summary()
tracker --> svc : DownloadSummary

svc --> ui : DownloadComplete(summary)

deactivate tracker
deactivate downloader
deactivate svc

' エラーハンドリング詳細
group Error Handling Chain
    note over spawn1, writer
        **Rust Error Propagation:**
        
        1. HttpError -> DownloadError (From trait)
        2. std::io::Error -> DownloadError (From trait)
        3. Result<T, E> -> 自動エラー伝播 (? operator)
        4. anyhow::Context -> エラーコンテキスト追加
    end note
end

' メモリ管理詳細
group Memory Management
    note over downloader, http
        **Zero-Copy & Buffer Pool:**
        
        1. ObjectPool<Vec<u8>> - バッファ再利用
        2. tokio::io::AsyncRead - ゼロコピーストリーム
        3. Arc<T> - 参照カウント共有
        4. 自動Drop - RAII メモリ管理
    end note
end

' 並行性制御
group Concurrency Control
    note over sem, spawn1
        **Async Concurrency:**
        
        1. Semaphore::acquire() - 非ブロッキング制限
        2. tokio::spawn() - 軽量グリーンスレッド
        3. CancellationToken - 協調的キャンセル
        4. broadcast::channel - 進捗通知
    end note
end

@enduml