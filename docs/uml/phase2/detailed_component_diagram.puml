@startuml DetailedComponentDiagram
!theme plain
title コンポーネント図（詳細） - Zoom Video Mover アーキテクチャ

package "Presentation Components" {
  component "GUI Framework" as GUI {
    interface "IWindow" as IWindow
    interface "IDialog" as IDialog
    interface "IPanel" as IPanel
    
    component "MainWindow" as MainWin
    component "SettingsDialog" as Settings
    component "ProgressPanel" as Progress
    component "ErrorDialog" as Error
    
    MainWin -up- IWindow
    Settings -up- IDialog
    Progress -up- IPanel
    Error -up- IDialog
  }
  
  component "Platform Adapter" as Platform {
    interface "IFileDialog" as IFileDialog
    interface "INotification" as INotification
    
    component "WindowsFileDialog" as WinFileDialog
    component "WindowsNotification" as WinNotification
    
    WinFileDialog -up- IFileDialog
    WinNotification -up- INotification
  }
}

package "Application Components" {
  component "Service Layer" as Services {
    interface "IAuthService" as IAuthService
    interface "IRecordingService" as IRecordingService
    interface "IDownloadService" as IDownloadService
    interface "IConfigService" as IConfigService
    
    component "AuthenticationService" as AuthSvc
    component "RecordingService" as RecSvc
    component "DownloadService" as DlSvc
    component "ConfigService" as CfgSvc
    
    AuthSvc -up- IAuthService
    RecSvc -up- IRecordingService
    DlSvc -up- IDownloadService
    CfgSvc -up- IConfigService
  }
  
  component "Workflow Orchestrator" as Workflows {
    component "OAuthWorkflow" as OAuthWF
    component "SearchWorkflow" as SearchWF
    component "DownloadWorkflow" as DownloadWF
    component "ConfigWorkflow" as ConfigWF
  }
  
  component "Domain Model" as Domain {
    component "Authentication" as AuthDomain
    component "Recording" as RecDomain
    component "Download" as DlDomain
    component "Configuration" as CfgDomain
  }
}

package "Infrastructure Components" {
  component "API Client Layer" as APIClients {
    interface "IZoomAPI" as IZoomAPI
    interface "IOAuthClient" as IOAuthClient
    interface "IHttpClient" as IHttpClient
    
    component "ZoomApiClient" as ZoomAPI
    component "OAuthClient" as OAuth
    component "HttpClient" as Http
    
    ZoomAPI -up- IZoomAPI
    OAuth -up- IOAuthClient
    Http -up- IHttpClient
  }
  
  component "Storage Layer" as Storage {
    interface "IConfigRepository" as IConfigRepo
    interface "ISecureStorage" as ISecureStorage
    interface "IFileManager" as IFileManager
    
    component "TomlConfigRepository" as TomlRepo
    component "EncryptedTokenStorage" as TokenStorage
    component "LocalFileManager" as FileManager
    
    TomlRepo -up- IConfigRepo
    TokenStorage -up- ISecureStorage
    FileManager -up- IFileManager
  }
  
  component "Security Layer" as Security {
    interface "ICrypto" as ICrypto
    interface "ITokenManager" as ITokenManager
    
    component "AesGcmCipher" as Cipher
    component "SecureTokenManager" as TokenMgr
    
    Cipher -up- ICrypto
    TokenMgr -up- ITokenManager
  }
}

package "External Interfaces" {
  component "Zoom Cloud Platform" as ZoomCloud {
    interface "OAuth Server" as OAuthServer
    interface "Recording API" as RecordingAPI
    interface "Download Endpoint" as DownloadEndpoint
  }
  
  component "Operating System" as OS {
    interface "File System" as FileSystem
    interface "Network Stack" as Network
    interface "Crypto Provider" as CryptoProvider
  }
}

' コンポーネント間依存関係
GUI --> Services : "uses"
Platform --> OS : "adapts"
Services --> Workflows : "orchestrates"
Workflows --> Domain : "operates on"
Services --> APIClients : "communicates via"
Services --> Storage : "persists with"
APIClients --> ZoomCloud : "connects to"
Storage --> OS : "uses"
Security --> OS : "uses"

' 詳細な依存関係
AuthSvc --> OAuth : "uses"
AuthSvc --> TokenStorage : "stores tokens"
RecSvc --> ZoomAPI : "fetches data"
DlSvc --> Http : "downloads files"
DlSvc --> FileManager : "manages files"
CfgSvc --> TomlRepo : "persists config"

' セキュリティ依存
TokenStorage --> Cipher : "encrypts with"
OAuth --> TokenMgr : "managed by"

' ポート・アダプターパターン
note right of Services
  **Hexagonal Architecture**
  - Services are ports
  - Infrastructure are adapters
  - Domain is isolated core
end note

note left of Domain
  **Domain Independence**
  - No external dependencies
  - Pure business logic
  - Technology agnostic
end note

' 品質属性
note bottom of APIClients
  **Quality Attributes:**
  - Rate Limiting: 10 req/sec
  - Retry Strategy: Exponential backoff
  - Circuit Breaker: Fail fast
  - Timeout: 30s per request
end note

note bottom of Storage
  **Quality Attributes:**
  - Encryption: AES-256-GCM
  - Atomic Operations: TOML transactions
  - Backup: Config versioning
  - Performance: Lazy loading
end note

@enduml