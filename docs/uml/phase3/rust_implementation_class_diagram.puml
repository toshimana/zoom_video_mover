@startuml RustImplementationClassDiagram
!theme plain
title 実装クラス図 - Rust言語特性対応設計

package "Authentication Module" <<crate>> {
  struct User {
    - user_id: String
    - email: String  
    - display_name: String
    - account_type: AccountType
    
    + new(user_id: String, email: String) -> Self
    + authenticate(credentials: &Credentials) -> Result<OAuth2Token, AuthError>
    + is_authenticated(&self) -> bool
    + display_name(&self) -> &str
  }
  
  struct OAuth2Token {
    - access_token: SecretString
    - refresh_token: SecretString
    - token_type: String
    - expires_at: DateTime<Utc>
    - scope: String
    
    + new(access: String, refresh: String, expires: DateTime<Utc>) -> Self
    + is_expired(&self) -> bool
    + refresh(&self, client: &dyn OAuthClient) -> Result<Self, AuthError>
    + encrypt(&self, key: &Key) -> Result<EncryptedToken, CryptoError>
    + time_until_expiry(&self) -> Duration
  }
  
  interface OAuthClient <<trait>> {
    + {abstract} exchange_code(code: &str) -> Result<OAuth2Token, AuthError>
    + {abstract} refresh_token(token: &OAuth2Token) -> Result<OAuth2Token, AuthError>
    + {abstract} validate_token(token: &OAuth2Token) -> Result<bool, AuthError>
  }
  
  struct ZoomOAuthClient {
    - http_client: Arc<dyn HttpClient>
    - config: Arc<ApplicationConfig>
    - rate_limiter: Arc<RateLimiter>
  }
}

package "Download Module" <<crate>> {
  struct DownloadTask {
    - task_id: Uuid
    - recording_id: String
    - target_path: PathBuf
    - status: Arc<RwLock<DownloadStatus>>
    - progress: Arc<AtomicU64>
    - bytes_downloaded: Arc<AtomicU64>
    - total_bytes: u64
    - started_at: DateTime<Utc>
    - cancel_token: CancellationToken
    
    + new(recording: &Recording, path: PathBuf) -> Self
    + async fn start(&self) -> Result<(), DownloadError>
    + async fn pause(&self) -> Result<(), DownloadError>
    + async fn resume(&self) -> Result<(), DownloadError>
    + fn cancel(&self) -> Result<(), DownloadError>
    + fn get_progress(&self) -> f64
    + fn get_speed(&self) -> u64
  }
  
  struct ProgressTracker {
    - tasks: Arc<RwLock<HashMap<Uuid, DownloadTask>>>
    - total_bytes: Arc<AtomicU64>
    - downloaded_bytes: Arc<AtomicU64>
    - start_time: DateTime<Utc>
    - progress_tx: broadcast::Sender<ProgressUpdate>
    
    + new() -> Self
    + async fn add_task(&self, task: DownloadTask)
    + async fn update_progress(&self, task_id: Uuid, bytes: u64)
    + fn get_overall_progress(&self) -> f64
    + fn subscribe_progress(&self) -> broadcast::Receiver<ProgressUpdate>
  }
  
  interface DownloadEngine <<trait>> {
    + {abstract} download_file(url: &str, path: &Path) -> Result<(), DownloadError>
    + {abstract} download_with_progress(url: &str, path: &Path, progress: Arc<dyn ProgressReporter>) -> Result<(), DownloadError>
  }
  
  struct ParallelDownloader {
    - http_client: Arc<dyn HttpClient>
    - semaphore: Arc<Semaphore>
    - buffer_pool: ObjectPool<Vec<u8>>
    - chunk_size: usize
  }
}

package "Storage Module" <<crate>> {
  interface SecureStorage <<trait>> {
    + {abstract} store_encrypted(key: &str, data: &[u8]) -> Result<(), StorageError>
    + {abstract} load_encrypted(key: &str) -> Result<Vec<u8>, StorageError>
    + {abstract} delete(key: &str) -> Result<(), StorageError>
  }
  
  struct AesGcmStorage {
    - key: Key
    - storage_path: PathBuf
    - cipher: Aes256Gcm
  }
  
  interface ConfigRepository <<trait>> {
    + {abstract} save_config(config: &ApplicationConfig) -> Result<(), ConfigError>
    + {abstract} load_config() -> Result<ApplicationConfig, ConfigError>
  }
  
  struct TomlConfigRepository {
    - config_path: PathBuf
    - backup_path: PathBuf
  }
}

package "HTTP Module" <<crate>> {
  interface HttpClient <<trait>> {
    + {abstract} get(url: &str) -> Result<Response, HttpError>
    + {abstract} post(url: &str, body: &[u8]) -> Result<Response, HttpError>
    + {abstract} download_stream(url: &str) -> Result<ByteStream, HttpError>
  }
  
  struct ReqwestClient {
    - client: reqwest::Client
    - rate_limiter: Arc<RateLimiter>
    - retry_config: RetryConfig
  }
  
  struct RateLimiter {
    - permits: Arc<Semaphore>
    - window: Duration
    - last_reset: Arc<Mutex<Instant>>
  }
}

package "Error Handling" <<crate>> {
  enum AppError {
    Auth(AuthError),
    Download(DownloadError),
    Storage(StorageError),
    Http(HttpError),
    Config(ConfigError),
  }
  
  enum AuthError {
    InvalidCredentials,
    TokenExpired,
    NetworkError(HttpError),
    OAuthFlowError(String),
  }
  
  enum DownloadError {
    NetworkError(HttpError),
    FileSystemError(std::io::Error),
    ChecksumMismatch,
    Cancelled,
    InsufficientSpace,
  }
}

' Rust特有の関係性
User --> OAuth2Token : "owns"
DownloadTask --> DownloadStatus : "thread-safe state"
ProgressTracker --> DownloadTask : "manages"
ZoomOAuthClient ..|> OAuthClient : "implements"
ParallelDownloader ..|> DownloadEngine : "implements"
AesGcmStorage ..|> SecureStorage : "implements"
TomlConfigRepository ..|> ConfigRepository : "implements"
ReqwestClient ..|> HttpClient : "implements"

' メモリ安全性・所有権
note right of OAuth2Token
  **Rust Memory Safety:**
  - SecretString: 自動ゼロ化
  - DateTime<Utc>: タイムゾーン安全
  - Result<T, E>: エラーハンドリング強制
end note

note left of DownloadTask
  **並行性・所有権:**
  - Arc<RwLock<T>>: 読み書きロック
  - Arc<AtomicU64>: ロックフリー操作
  - CancellationToken: 協調的キャンセル
end note

note bottom of "Error Handling"
  **Error Type System:**
  - thiserror: 自動Error実装
  - From trait: エラー変換
  - Result<T, E>: 失敗可能操作
  - anyhow: エラーコンテキスト
end note

@enduml