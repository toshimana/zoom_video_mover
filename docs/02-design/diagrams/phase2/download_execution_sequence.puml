@startuml DownloadExecutionSequence
!theme plain
title シーケンス図 - 並列ダウンロード実行フロー

actor User as user
participant "MainWindow" as ui
participant "DownloadService" as download
participant "ProgressTracker" as tracker
participant "DownloadTask" as task1
participant "DownloadTask" as task2 
participant "HttpClient" as http
participant "FileManager" as file
participant "ZoomAPI" as zoom

user -> ui : ダウンロード開始ボタンクリック
activate ui

ui -> download : downloadMultiple(recordings)
activate download

download -> tracker : new()
activate tracker

loop 各録画ファイルに対して
    download -> download : createDownloadTask(recording)
    download -> task1 : new(recording, targetPath)
    activate task1
    
    download -> tracker : addTask(task1)
    tracker -> tracker : updateTotalBytes()
end

download -> download : startParallelDownloads()

par 並列ダウンロード1
    download -> task1 : start()
    
    task1 -> http : downloadStream(url)
    activate http
    
    loop チャンクダウンロード
        http -> zoom : GET /recordings/chunk
        activate zoom
        zoom --> http : FileChunk
        deactivate zoom
        
        http -> task1 : onChunkReceived(chunk)
        task1 -> task1 : updateProgress(chunkSize)
        task1 -> tracker : updateTaskProgress(taskId, bytes)
        tracker -> tracker : calculateOverallProgress()
        tracker -> ui : progressUpdate(progress)
        ui -> ui : 進捗バー更新
        
        task1 -> file : writeChunk(chunk)
        activate file
        file --> task1 : WriteResult
        deactivate file
    end
    
    http --> task1 : DownloadComplete
    deactivate http
    
    task1 -> file : verifyChecksum()
    activate file
    file -> file : calculateHash()
    file --> task1 : ChecksumValid
    deactivate file
    
    task1 -> task1 : setStatus(COMPLETED)
    task1 -> tracker : taskCompleted(taskId)
    
else 並列ダウンロード2
    download -> task2 : start()
    activate task2
    
    note right of task2
        同様のダウンロード処理を
        並列実行（最大5つまで）
    end note
    
    task2 -> task2 : 同様の処理
    task2 -> tracker : 進捗更新
    
end

tracker -> tracker : allTasksCompleted()
tracker -> ui : downloadCompleted()
ui --> user : ダウンロード完了通知

alt エラー発生時
    task1 -> task1 : handleError(error)
    task1 -> task1 : retryDownload()
    
    alt リトライ回数超過
        task1 -> task1 : setStatus(FAILED)
        task1 -> ui : downloadFailed(error)
        ui --> user : エラー通知表示
    end
end

deactivate task1
deactivate task2
deactivate tracker
deactivate download
deactivate ui

@enduml